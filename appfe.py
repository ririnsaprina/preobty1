"""streamlit md

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JThabIYpGmlAfYXqNUQQysLpTis3wEJG
"""

import streamlit as st
import joblib
import numpy as np
import pandas as pd

# Load model
model = joblib.load('xgbmodel.pkl')

# Mapping kategori ke angka (sesuai preprocessing saat training)
def encode_input(
    gender, age, height, weight, history, favc, fcvc, ncp,
    caec, smoke, ch2o, scc, faf, tue, calc, mtrans
):
    return [
        1.0 if gender == "Male" else 0.0,
        float(age),
        float(height),
        float(weight),
        1.0 if history == "yes" else 0.0,
        1.0 if favc == "yes" else 0.0,
        float(fcvc),
        float(ncp),
        float({"No": 0, "Sometimes": 1, "Frequently": 2, "Always": 3}[caec]),
        1.0 if smoke == "yes" else 0.0,
        float(ch2o),
        1.0 if scc == "yes" else 0.0,
        float(faf),
        float(tue),
        float({"no": 0, "Sometimes": 1, "Frequently": 2, "Always": 3}[calc]),
        float({
            "Public_Transportation": 0,
            "Walking": 1,
            "Motorbike": 2,
            "Bike": 3,
            "Automobile": 4
        }[mtrans])
    ]

# Aplikasi Streamlit
def main():
    st.title("Prediksi Tingkat Obesitas")
    st.write("Masukkan data gaya hidup untuk mengetahui tingkat risiko obesitas.")

    # Form input user
    gender = st.selectbox("Jenis Kelamin", ["Male", "Female"])
    age = st.number_input("Usia", min_value=1, max_value=100, value=25)
    height = st.number_input("Tinggi (meter)", min_value=1.0, max_value=2.5, value=1.7)
    weight = st.number_input("Berat (kg)", min_value=30.0, max_value=200.0, value=70.0)
    history = st.selectbox("Riwayat keluarga obesitas", ["yes", "no"])
    favc = st.selectbox("Sering makan makanan berkalori tinggi?", ["yes", "no"])
    fcvc = st.slider("Frekuensi makan sayur (1-3)", 1.0, 3.0, 2.0)
    ncp = st.slider("Jumlah makan utama per hari", 1.0, 4.0, 3.0)
    caec = st.selectbox("Makan di luar jam makan utama", ["No", "Sometimes", "Frequently", "Always"])
    smoke = st.selectbox("Merokok", ["yes", "no"])
    ch2o = st.slider("Asupan air harian (1-3)", 1.0, 3.0, 2.0)
    scc = st.selectbox("Pantau asupan kalori?", ["yes", "no"])
    faf = st.slider("Frekuensi olahraga (0-3)", 0.0, 3.0, 1.0)
    tue = st.slider("Waktu dengan teknologi (0-3)", 0.0, 3.0, 1.0)
    calc = st.selectbox("Konsumsi alkohol", ["no", "Sometimes", "Frequently", "Always"])
    mtrans = st.selectbox("Moda transportasi", ["Public_Transportation", "Walking", "Motorbike", "Bike", "Automobile"])

    if st.button("Prediksi"):
        try:
            features = encode_input(
                gender, age, height, weight, history, favc, fcvc, ncp,
                caec, smoke, ch2o, scc, faf, tue, calc, mtrans
            )
            input_df = pd.DataFrame([features], columns=[
                'Gender', 'Age', 'Height', 'Weight',
                'family_history_with_overweight', 'FAVC', 'FCVC', 'NCP',
                'CAEC', 'SMOKE', 'CH2O', 'SCC', 'FAF', 'TUE', 'CALC', 'MTRANS'
            ])

            prediction = model.predict(input_df)[0]

            # Mapping hasil prediksi
            obesity_levels = {
                0: "Normal Weight",
                1: "Overweight Level I", 
                2: "Overweight Level II",
                3: "Obesity Type I", 
                4: "Obesity Type II",
                5: "Obesity Type III",
                6: "Insufficient Weight"
            }

            result = obesity_levels.get(prediction, f"Level {prediction}")
            st.success(f"Hasil Prediksi: {result}")

        except Exception as e:
            st.error(f"‚ùå Terjadi Error: {str(e)}")

if __name__ == '__main__':
    main()
